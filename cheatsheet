
//  Method format
// func add(x int, y int) int {
// 	return x + y
// }

// := is declare + assign
// c, python, java := true, false, "no!"

// Declared via inference
// v := 42

// For loops
/*
sum := 0
for i := 0; i < 10; i++ {
  sum += i
}
fmt.Println(sum)
*/

// While loops
/*
for sum < 1000 {
  sum += sum
}
*/

// Switch statements
/*
switch os := runtime.GOOS; os {
	case "darwin":
		fmt.Println("OS X.")
	case "linux":
		fmt.Println("Linux.")
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf("%s.", os)
	}
*/

// DEFER statements
/*

func main() {
	defer fmt.Println("world")

	fmt.Println("hello")
}

*/

// POINTERS
// &variable --> Get memory address
// *variable --> Get the value in the memory address

// Structs
/*

type Vertex struct {
	X int
	Y int
}

func main() {
	fmt.Println(Vertex{1, 2})
}

*/

/*
POINTER TO STRUCT:
(*p).X not necessary

Can simply do p.X
*/

// Arrays
/*
var a [2]string
	a[0] = "Hello"
	a[1] = "World"
	fmt.Println(a[0], a[1])
*/

// Slices --> Delcared like array but without number in []
// Needs an array to work
/*
primes := [6]int{2, 3, 5, 7, 11, 13}

var s []int = primes[1:4]
*/
// A slice does not store any data, it just describes a section of an underlying array.

// Slice literal --> Like array but without the fixed size
/*
q := []int{2, 3, 5, 7, 11, 13}
fmt.Println(q)
*/

// Loop over slice
/*

var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}

func main() {
	for i, v := range pow {
		fmt.Printf("2**%d = %d\n", i, v)
	}
}

*/
